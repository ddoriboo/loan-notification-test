name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Install flake8 if not in requirements
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test basic functionality
      run: |
        # Basic import tests for current architecture
        python -c "from upload_analyzer import UploadAnalyzer; print('✅ Upload analyzer import passed')"
        python -c "import upload_web_server; print('✅ Web server import passed')"
        
    - name: Test core functionality
      run: |
        # Test core analyzer functionality
        python -c "
        from upload_analyzer import analyzer
        print('✅ Global analyzer instance available')
        print(f'📊 Analyzer ready: {hasattr(analyzer, \"analyze_uploaded_csv\")}')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security checks
      run: |
        # Check for common security issues
        echo "🔍 Checking for hardcoded secrets..."
        if grep -r "sk-" . --exclude-dir=.git --exclude="*.md" || 
           grep -r "api_key.*=" . --exclude-dir=.git --exclude="*.md" ||
           grep -r "password.*=" . --exclude-dir=.git --exclude="*.md"; then
          echo "❌ Potential hardcoded secrets found!"
          exit 1
        else
          echo "✅ No hardcoded secrets detected"
        fi

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Build Docker image
      run: |
        docker build -t ai-message-generator:${{ github.sha }} .
        docker build -t ai-message-generator:latest .

    - name: Test Docker image
      run: |
        # Test that the container starts properly with upload server
        docker run -d --name test-container -p 8080:8080 ai-message-generator:latest
        sleep 15
        # Basic health check - expect upload interface
        if curl -f http://localhost:8080/ | grep -q "CSV 업로드"; then
          echo "✅ Upload server responding correctly"
        else
          echo "❌ Upload server not responding as expected"
          docker logs test-container
          exit 1
        fi
        docker stop test-container
        docker rm test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Deploy notification
      run: |
        echo "🚀 Ready for deployment!"
        echo "📦 Docker image: ai-message-generator:${{ github.sha }}"
        echo "🌟 All tests passed, ready to deploy to your preferred platform"

    # Uncomment and configure for your deployment platform:
    
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.12
    #   with:
    #     heroku_api_key: ${{secrets.HEROKU_API_KEY}}
    #     heroku_app_name: "your-app-name"
    #     heroku_email: "your-email@example.com"

    # - name: Deploy to AWS
    #   run: |
    #     # Add your AWS deployment steps here

    # - name: Deploy to Azure
    #   run: |
    #     # Add your Azure deployment steps here